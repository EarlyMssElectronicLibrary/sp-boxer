#!/bin/sh

read -r -d '' HELP <<-'EOF'
Copy files from repository to staging and prep for delivery.

Script requires a configuration file: $HOME/.sp-boxer/conf

The configuration file should have the following content:

      STAGING_VOLUME=/Volumes/SPP-Staging
      STAGING_DIR=Scholar-Packages
      CAPTURE_REPO_VOLUME=/Volumes/SPP-REPOSITORY-1
      PROCESSED_REPO_VOLUME=/Volumes/SPP-REPOSITORY-2
      REPO_DIR=Repository
      PACKAGE_INFO=PACKAGE_INFO.txt


* Read in instructions:

STAGE_DIR
PROCESSED_REPO_VOLUME

MANUSRIPT_NAME

* Prepare directories

  MS_NAME/
    ReadMe.html
    FileList.html
    Data/
      FOLIO_DIR1/
      FOLIO_DIR2/
      ...
    ResearchContrib/

* Copy files under new names

* Add metadata

EOF

### TEMPFILES
# From:
#   http://stackoverflow.com/questions/430078/shell-script-templates
tmp=${TMPDIR:-/tmp}/prog.$$
# delete any existing temp files
trap "rm -f $tmp.?; exit 1" 0 1 2 3 13 15
# then do
#   ...real work that creates temp files $tmp.1, $tmp.2, ...

#### USAGE AND ERRORS
cmd=`basename $0 .sh`
export SPINDLE_COMMAND=$cmd
source `dirname $0`/sp-boxer_functions

usage() {
   echo "Usage: $cmd [-h] INPUT_FILE"
   echo ""
   echo "OPTIONS"
   echo ""
   echo "   -h             Display help message"
   echo ""
}

### VARIABLES
date_cmd="date +%FT%T%z"
JSON_TEMPLATE=`dirname $0`/../data/metadata_template.json
if [ ! -f $JSON_TEMPLATE ]; then
  error "Cannot find $JSON_TEMPLATE"
fi

### OPTIONS
while getopts ":hd:" opt; do
  case $opt in
    h)
      usage
      help
      exit 1
      ;;
    \?)
      echo "ERROR Invalid option: -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

### THESCRIPT
# grab input file and confirm it exists;
INPUT_FILE=$1
if [ -z "$INPUT_FILE" ]; then
  error "Please provide an INPUT_FILE"
elif [ ! -f $INPUT_FILE ]; then
  error "INPUT_FILE not found: $INPUT_FILE"
fi

# get the variables
# STAGING_VOLUME=/Volumes/SPP-Staging1
# STAGING_DIR=Scholar-Packages
# CAPTURE_REPO_VOLUME=/Volumes/SPP-REPOSITORY-1
# PROCESSED_REPO_VOLUME=/Volumes/SPP-REPOSITORY-2
# REPO_DIR=Repository
# PACKAGE_INFO=PACKAGE_INFO.txt

config_file=$HOME/.sp-boxer/conf
if [ -f $config_file ]; then
  source $config_file
else
  error "No config file found; expected $config_file"
fi


# TODO make volume location configurable, over-ridable

shelf_mark=`get_value $INPUT_FILE "SHELF_MARK"`
if [ -n "$shelf_mark" ]; then
  message "Shelf mark is $shelf_mark"
else
  error "Could not acquire shelf mark from $INPUT_FILE"
fi
short_shelf_mark=`get_value $INPUT_FILE "SHORT_SHELF_MARK"`
if valid_short_shelfmark "$short_shelf_mark" ;
then
    message "Using short shelfmark: $short_shelf_mark"
else
    error "Invalid short shelfmark: $short_shelf_mark"
fi
shelf_mark_dir=`echo $shelf_mark | sed 's/  */_/g'`
recipient=`get_value $INPUT_FILE "RECIPIENT"`
recipient_dir=`get_value $INPUT_FILE "RECIPIENT_DIR"`
if [ ! -n "$recipient_dir" ]; then
  recipient_dir="NO_RECIPIENT_SPECIFIED"
  warning "Using recipient directory: $recipient_dir"
fi

package_type=`get_value $INPUT_FILE "PACKAGE_TYPE"`
if [ ! -n "$package_type" ]; then
    error "Cannot create package without PACKAGE_TYPE input file (expected: scholar or archive)"
fi

staging_volume=$STAGING_VOLUME
staging_dir=$STAGING_DIR
processed_repo_volume=$PROCESSED_REPO_VOLUME
capture_repo_volume=$CAPTURE_REPO_VOLUME
repo_dir=$REPO_DIR

# make sure we find the processed_repo
processed_repo=$processed_repo_volume/$repo_dir
if [ -d $processed_repo ]; then
  message "Using processed image repository: $processed_repo"
else
  error "Processed image repository not found: $processed_repo"
fi

# make sure we find the capture_repo
capture_repo=$capture_repo_volume/$repo_dir
if [ -d $capture_repo ]; then
    message "Using capture image repository: $capture_repo"
else
    error "Capture image repository not found: $capture_repo"
fi

# make sure the staging volume is there
if ! ls $staging_volume/* >/dev/null ; then
  error "STAGING_VOLUME not found $staging_volume"
fi

staging=$staging_volume/$staging_dir/$recipient_dir
if [ ! -d $staging ]; then
  message "Creating STAGING_DIR $staging"
  mkdir -p $staging
fi
copy_log=$staging/${shelf_mark_dir}_copy_`date +%Y%m%d-%H%M%S%z`.log

package_dir=$staging/$shelf_mark_dir
if [ -d $package_dir ]; then
  warning "Manuscript directory already exists: $package_dir"
else
  message "Creating manuscript directory $package_dir"
  mkdir $package_dir
fi
message "Using manuscript directory: $package_dir"

data_dir=$package_dir/Data
if [ -d $data_dir ]; then
  warning "Data directory already exists: $data_dir"
else
  message "Creating Data directory $data_dir"
  mkdir $data_dir
fi
message "Using Data directory: $data_dir"

contrib_dir=$package_dir/ResearchContrib
if [ -d $contrib_dir ]; then
  warning "ResearchContrib directory already exists: $contrib_dir"
else
  message "Creating ResearchContrib directory $contrib_dir"
  mkdir $contrib_dir
fi
message "Using ResearchContrib directory: $contrib_dir"

contrib_data_dir=$contrib_dir/Data
if [ -d $contrib_data_dir ]; then
  warning "ResearchContrib/Data directory already exists: $contrib_data_dir"
else
  message "Creating ResearchContrib/Data directory $contrib_data_dir"
  mkdir $contrib_data_dir
fi
message "Using ResearchContrib/Data directory: $contrib_data_dir"

seq_dirs=$tmp.1
grep "^SEQ_DIR" $INPUT_FILE | awk '{ print $2 }' > $seq_dirs
while read seq
do
  seq_dir=$data_dir/$seq
  if [ -d $seq_dir ]; then
    warning "Sequence directory already exists: $seq_dir"
  else
    message "Creating sequence directory $seq_dir"
    mkdir $seq_dir
  fi
done < $seq_dirs

# Add any CSV or TEI files
input_dir=`dirname $INPUT_FILE`
tei_csv_files=`ls $input_dir/*.csv $input_dir/*.xml 2>/dev/null`
if [[ $tei_csv_files ]]
  then
  message "Copying TEI and CSV files to $data_dir"
  cp -v $tei_csv_files $data_dir
else
  warning "No TEI or CSV files found in input directory $input_dir"
fi

metadata_tmp=$tmp.3
# copy the files
# PICK source new_name
if grep -q "^PICK" $INPUT_FILE 2>/dev/null; then
  pick_list=$tmp.2
  grep "^PICK" $INPUT_FILE | awk '{ print $2 " " $3 }' > $pick_list
  count=0
  total=`wc -l $pick_list | awk '{ print $1 }'`
  width=6
  while read pick
  do
    count=$(( $count + 1 ))
    counter=`printf "%${width}d/%d" $count $total`
    source=$processed_repo/`echo $pick | awk '{ print $1 }'`
    dest=$data_dir/`echo $pick | awk '{ print $2 }'`

    if [ -f $dest ]; then
      warning "$counter  `$date_cmd`  CORE DATA FILE EXISTS SKIPPING  `basename $dest`"
    else
      cp -v $source $dest >> $copy_log
      if [[ $? -ne 0 ]]; then
        fail "Error copying $source to $dest (full line: $pick)"
      fi
      message "$counter  `$date_cmd`  CORE DATA `basename $dest`"
      # add the metadata
      shoot_list=`basename $source | awk -F_ '{ print $1 }'`
      subject=`image_subject $dest $INPUT_FILE`
      box-build-metadata $shoot_list $dest "Image of $subject" > $metadata_tmp
      exiftool -overwrite_original -j=$metadata_tmp $dest
      if [[ $dest =~ \.tif$ ]]; then
        message "Generate XMP sidecar for $dest"
        exiftool -TagsFromFile $dest $dest.xmp
      fi
    fi
  done < $pick_list
else
  message "No PICK images found in $INPUT_FILE"
fi

if grep -q "^CONTRIB" $INPUT_FILE 2>/dev/null; then
  contrib_list=$tmp.4
  grep "^CONTRIB" $INPUT_FILE | awk '{ print $2 " " $3 }' > $contrib_list
  count=0
  total=`wc -l $contrib_list | awk '{ print $1 }'`
  width=6
  while read contrib
  do
    count=$(( $count + 1 ))
    counter=`printf "%${width}d/%d" $count $total`
    source=$processed_repo/`echo $contrib | awk '{ print $1 }'`
    dest=$contrib_data_dir/`echo $contrib | awk '{ print $2 }'`

    dest_dir=`dirname $dest`
    if [ ! -d $dest_dir ]; then
      message "Creating $dest_dir"
      mkdir $dest_dir
      if [[ $? -ne 0 ]]; then
        fail "Error creating directory $dest_dir (full line: $contrib)"
      fi
    fi

    if [ -f $dest ]; then
      warning "$counter  `$date_cmd`  CONTRIB FILE EXISTS SKIPPING  `basename $dest`"
    else
      cp -v $source $dest >> $copy_log
      if [[ $? -ne 0 ]]; then
        fail "Error copying $source to $dest (full line: $contrib)"
      fi
      message "$counter  `$date_cmd`  CONTRIB  `basename $dest`"
      # add the metadata
      shoot_list=`basename $source | awk -F_ '{ print $1 }'`
      subject=`image_subject $dest $INPUT_FILE`
      box-build-metadata $shoot_list $dest "Image of $subject" > $metadata_tmp
      exiftool -overwrite_original -j=$metadata_tmp $dest
      if [[ $dest =~ \.tif$ ]]; then
        message "Generate XMP sidecar for $dest"
        exiftool -TagsFromFile $dest $dest.xmp
      fi
    fi
  done < $contrib_list
else
  message "No CONTRIB images found in $INPUT_FILE"
fi

if grep -q "^CAPTURE" $INPUT_FILE 2>/dev/null; then
  capture_list=$tmp.4
  grep "^CAPTURE" $INPUT_FILE | awk '{ print $2 " " $3 }' > $capture_list
  count=0
  total=`wc -l $capture_list | awk '{ print $1 }'`
  width=6
  while read capture
  do
    count=$(( $count + 1 ))
    counter=`printf "%${width}d/%d" $count $total`
    source=$capture_repo/`echo $capture | awk '{ print $1 }'`
    dest=$data_dir/`echo $capture | awk '{ print $2 }'`

    dest_dir=`dirname $dest`
    if [ ! -d $dest_dir ]; then
      message "Creating $dest_dir"
      mkdir $dest_dir
      if [[ $? -ne 0 ]]; then
        fail "Error creating directory $dest_dir (full line: $capture)"
      fi
    fi

    if [ -f $dest ]; then
      warning "$counter  `$date_cmd`  CAPTURE FILE EXISTS SKIPPING  `basename $dest`"
    else
      cp -v $source $dest >> $copy_log
      if [[ $? -ne 0 ]]; then
        fail "Error copying $source to $dest (full line: $capture)"
      else
        # capture JPEGs are thumbnails
        if [[ $dest =~ \.jpg$ ]]; then
          message "Generate thumbnail from $dest"
          mogrify -resize %10 $dest
        fi
      fi
      message "$counter  `$date_cmd`  CAPTURE  `basename $dest`"
      # add the metadata
      shoot_list=`basename $source | awk -F_ '{ print $1 }'`
      subject=`image_subject $dest $INPUT_FILE`
      box-build-metadata $shoot_list $dest "Image of $subject" > $metadata_tmp
      exiftool -overwrite_original -j=$metadata_tmp $dest
      if [[ $dest =~ \.tif$ ]]; then
        message "Generate XMP sidecar for $dest"
        exiftool -TagsFromFile $dest $dest.xmp
      fi
    fi
  done < $capture_list
else
  message "No CAPTURE images found in $INPUT_FILE"
fi


metadata_file=$package_dir/$PACKAGE_INFO
echo "SHELF_MARK $shelf_mark" > $metadata_file
echo "SHORT_SHELF_MARK $short_shelf_mark" >> $metadata_file
echo "RECIPIENT $recipient" >> $metadata_file

empty_dirs=`find $package_dir -type d -empty`
if [ -n "$empty_dirs" ]; then
    message "Found empty directories:"
    message "$empty_dirs"
    message "Deleting empty directories"
    find $package_dir -type d -empty -delete
fi


### EXIT
# http://stackoverflow.com/questions/430078/shell-script-templates
rm -f $tmp.?
trap 0
if [ -s $copy_log ]; then
  message "Log written to $copy_log"
fi
exit 0
